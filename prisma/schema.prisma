generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_CONNECTION_STRING")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model VideoView {
  id        Int      @id @default(autoincrement())
  ip        String?
  videoId   String?  @map(name: "video_id")
  userId    String?  @map(name: "user_id")
  createdAt DateTime @default(now()) @map(name: "created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map(name: "updated_at") @db.Timestamptz(6)

  @@index([ip], name: "ip")
  @@index([userId], name: "viewsUserId")
  @@index([videoId], name: "viewsVideoId")
  @@map(name: "video_views")
}

model Video {
  id                  Int       @id @default(autoincrement())
  userId              Int       @map(name: "user_id")
  videoId             String    @unique @default(cuid()) @map(name: "video_id")
  status              String    @default("queued")
  title               String    @default("new-upload")
  duration            Decimal   @default(0.0) @db.Decimal
  views               Int       @default(0)
  visibility          String    @default("unlisted")
  thumbnail           String?
  hlsMasterLink       String?   @map(name: "hls_master_link")
  sourceSegmentsCount Int?      @default(0) @map(name: "source_segments_count")
  percentCompleted    Decimal?  @default(0.000000) @map(name: "percent_completed") @db.Decimal
  createdAt           DateTime  @default(now()) @map(name: "created_at") @db.Timestamptz(6)
  updatedAt           DateTime  @default(now()) @map(name: "updated_at") @db.Timestamptz(6)
  deletedAt           DateTime? @map(name: "deleted_at") @db.Timestamptz(6)

  @@index([visibility], name: "visibility")
  @@index([videoId], name: "videosVideoId")
  @@map(name: "videos")
}
