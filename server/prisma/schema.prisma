generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int           @id @default(autoincrement())
  email     String        @unique
  username  String        @unique
  password  String
  name      String
  videos    Video[]
  uploads   Upload[]
  sessions  UserSession[]
  updatedAt DateTime      @updatedAt
  createdAt DateTime      @default(now())
}

model UserSession {
  id        String   @id @default(uuid())
  ip        String   @default("0.0.0.0")
  userAgent String   @default("Unknown")
  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Upload {
  id            Int          @id @default(autoincrement())
  contentType   String
  size          Int          @default(0)
  filename      String       @default("New Upload")
  storageBucket String
  status        UploadStatus @default(PENDING)
  storageKey    String
  userId        Int?
  User          User?        @relation(fields: [userId], references: [id])
  Video         Video[]
  updatedAt     DateTime     @updatedAt
  createdAt     DateTime     @default(now())
}

model Video {
  id            Int              @id @default(autoincrement())
  title         String           @default("New Video")
  storageBucket String
  storageKey    String
  userId        Int?
  User          User?            @relation(fields: [userId], references: [id])
  uploadId      Int?
  upload        Upload?          @relation(fields: [uploadId], references: [id])
  renditions    VideoRendition[]
  updatedAt     DateTime         @updatedAt
  createdAt     DateTime         @default(now())
}

model VideoRendition {
  id            Int             @id @default(autoincrement())
  storageBucket String
  storageKey    String
  percentage    Int             @default(0)
  status        RenditionStatus @default(QUEUED)
  videoId       Int
  video         Video           @relation(fields: [videoId], references: [id])
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
}

enum UploadStatus {
  PENDING
  FAILED
  COMPLETED
}

enum RenditionStatus {
  QUEUED
  PROCESSING
  FAILED
  COMPLETED
}
